name: Nightly Build
on:
  workflow_dispatch:

jobs:
  build_linux:
    name: Build Linux & Release
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Deps
        run: |
          sudo apt-get install -y gcc-mingw-w64 libgl1-mesa-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev libwayland-dev libxkbcommon-dev

      - uses: actions/setup-go@v5
        with:
          go-version: "1.23.1"

      - name: Build
        run: |
          mkdir output
          go build -v -o output/datpack_linux --ldflags="-s -w -X 'main.GitCommitHash=$(git rev-parse --short=8 HEAD)'" cmd/datpack/*.go
          echo "Linux: datpack"
          go build -v -o output/datunpack_linux --ldflags="-s -w -X 'main.GitCommitHash=$(git rev-parse --short=8 HEAD)'" cmd/datunpack/*.go
          echo "Linux: datunpack"
          go build -v -o output/modelviewer_linux --ldflags="-s -w" cmd/modelviewer/*.go
          echo "Linux: modelviewer"
          go build -v -o output/roomviewer_linux --ldflags="-s -w" cmd/roomviewer/*.go
          echo "Linux: roomviewer"
          go build -v -o output/scrviewer_linux --ldflags="-s -w" cmd/scrviewer/*.go
          echo "Linux: scrviewer"
          go build -v -o output/t32viewer_linux --ldflags="-s -w" cmd/t32viewer/*.go
          echo "Linux: t32viewer"
          go build -v -o output/timviewer_linux --ldflags="-s -w" cmd/timviewer/*.go
          echo "Linux: timviewer"
          go build -v -o output/tm3pack_linux --ldflags="-s -w -X 'main.GitCommitHash=$(git rev-parse --short=8 HEAD)'" cmd/tm3pack/*.go
          echo "Linux: tm3pack"
          go build -v -o output/tm3unpack_linux --ldflags="-s -w -X 'main.GitCommitHash=$(git rev-parse --short=8 HEAD)'" cmd/tm3unpack/*.go
          echo "Linux: tm3unpack"

      - name: Create Release and Upload Assets
        uses: ncipollo/release-action@v1.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          tag: nightly
          prerelease: true
          name: nightly
          artifacts: "output/*"

  build_windows:
    name: Build Windows & Release
    permissions:
      contents: write
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: "1.23.1"

      - name: Build
        run: |
          mkdir output
          go build -v -o output/datpack_win.exe --ldflags="-extldflags=-static -s -w" cmd/datpack/gui.go cmd/datpack/main.go cmd/datpack/pack.go cmd/datpack/variable.go
          echo "Windows: datpack"
          go build -v -o output/datunpack_win.exe --ldflags="-extldflags=-static -s -w" cmd/datunpack/gui.go cmd/datunpack/main.go cmd/datunpack/unpack.go cmd/datunpack/variable.go
          echo "Windows: datunpack"
          go build -v -o output/modelviewer_win.exe --ldflags="-extldflags=-static -s -w" cmd/modelviewer/entry.go cmd/modelviewer/gltf.go cmd/modelviewer/main.go cmd/modelviewer/model.go cmd/modelviewer/texture.go cmd/modelviewer/variable.go
          echo "Windows: modelviewer"
          go build -v -o output/roomviewer_win.exe --ldflags="-extldflags=-static -s -w" cmd/roomviewer/gltf.go cmd/roomviewer/main.go cmd/roomviewer/model.go cmd/roomviewer/object.go cmd/roomviewer/texture.go cmd/roomviewer/variable.go
          echo "Windows: roomviewer"
          go build -v -o output/scrviewer_win.exe --ldflags="-extldflags=-static -s -w" cmd/scrviewer/bone_node.go cmd/scrviewer/main.go cmd/scrviewer/model.go cmd/scrviewer/texture.go cmd/scrviewer/variable.go
          echo "Windows: scrviewer"
          go build -v -o output/t32viewer_win.exe --ldflags="-extldflags=-static -s -w" cmd/t32viewer/entry.go cmd/t32viewer/main.go cmd/t32viewer/mode.go cmd/t32viewer/variable.go
          echo "Windows: t32viewer"
          go build -v -o output/timviewer_win.exe --ldflags="-extldflags=-static -s -w" cmd/timviewer/entry.go cmd/timviewer/main.go cmd/timviewer/mode.go cmd/timviewer/variable.go
          echo "Windows: timviewer"
          go build -v -o output/tm3pack_win.exe --ldflags="-extldflags=-static -s -w" cmd/tm3pack/gui.go cmd/tm3pack/main.go cmd/tm3pack/pack.go cmd/tm3pack/variable.go
          echo "Windows: tm3pack"
          go build -v -o output/tm3unpack_win.exe --ldflags="-extldflags=-static -s -w" cmd/tm3unpack/gui.go cmd/tm3unpack/main.go cmd/tm3unpack/unpack.go cmd/tm3unpack/variable.go
          echo "Windows: tm3unpack"

      - name: Create Release and Upload Assets
        uses: ncipollo/release-action@v1.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          tag: nightly
          prerelease: true
          name: nightly
          artifacts: "output/*"

  del_runs:
    runs-on: ubuntu-latest
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 30
          keep_minimum_runs: 3
